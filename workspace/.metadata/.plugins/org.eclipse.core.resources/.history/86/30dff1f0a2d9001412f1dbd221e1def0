#include  <msp430g2553.h>
#include "four_bit_lcd.h"
#include <stdio.h>

#define CHECK_BIT(var,pos) ((var) & (1<<(pos))) //push button

volatile    int flag    =   0;		//push button
volatile	int count	=	0;		//push button

void main (void){

	WDTCTL = WDTPW + WDTHOLD; // stop watchdog timer
	lcd_init();
	send_string("Vesalius");
	send_command(0xC0);
	send_string("Dynamics");

    //push button code
    //setting P1.6
	P1SEL  &=  (~BIT6);    //  Set P1.6    SEL as  GPIO
	P1DIR  &=  (~BIT6);    //  Set P1.6    SEL as  Input
	P1IES  |=  (BIT6); //  Falling Edge    1   ->  0
	P1IFG  &=  (~BIT6);    //  Clear   interrupt   flag    for P1.6
	P1IE   |=  (BIT6); //  Enable  interrupt   for P1.6

	//setting P1.7
	P1SEL  &=  (~BIT7);    //  Set P1.6    SEL as  GPIO
	P1DIR  &=  (~BIT7);    //  Set P1.6    SEL as  Input
	P1IES  |=  (BIT7); //  Falling Edge    1   ->  0
	P1IFG  &=  (~BIT7);    //  Clear   interrupt   flag    for P1.6
	P1IE   |=  (BIT7); //  Enable  interrupt   for P1.6

	__enable_interrupt();  //  Enable  Global  Interrupts
	//end push button code


    // Main loop
    while (1){

    	//push button code
		if(flag   ==  1)
		{
			//   Do  Something
			flag =   0;
			count++;

			char str[5];
			sprintf(str, "%d", count);
			lcd_init();
			send_string("Count value:");
			send_command(0xC0);
			send_string(str);

		} else if (flag == 2){
			flag = 0;
			count--;

			char str[5];
			sprintf(str, "%d", count);
			lcd_init();
			send_string("Count value:");
			send_command(0xC0);
			send_string(str);
		}
    	//end push button code

   }
}

//  Port    1   interrupt   service routine
//  used with push button code
#pragma vector=PORT1_VECTOR
__interrupt void    Port_1(void)
{
	if (CHECK_BIT(P1IFG, 6)){
		//P1.6 pin triggered
		__delay_cycles(50000);	//debounce code
		flag   =   1;
		P1IFG  &=  (~BIT6);    //  P1.6    IFG clear
	} else if (CHECK_BIT(P1IFG, 7)) {
		//P1.7 pin triggered
		__delay_cycles(50000);	//debounce code
		flag   =   2;
		P1IFG  &=  (~BIT7);    //  P1.7    IFG clear
	}
}
