#include  <msp430g2553.h>
#include "four_bit_lcd.h"
#include <stdio.h>

// Connect the servo SIGNAL wire to P1.2 through a 1K resistor.

#define MCU_CLOCK           1100000
#define PWM_FREQUENCY       46      // In Hertz, ideally 50Hz.

#define SERVO_STEPS         180     // Maximum amount of steps in degrees (180 is common)
#define SERVO_MIN           700     // The minimum duty cycle for this servo
#define SERVO_MAX           3000    // The maximum duty cycle

unsigned int PWM_Period     = (MCU_CLOCK / PWM_FREQUENCY);  // PWM Period
unsigned int PWM_Duty       = 0;                            // %

volatile    int flag    =   0;		//push button
volatile	int count	=	0;		//push button

void main (void){

	WDTCTL = WDTPW + WDTHOLD; // stop watchdog timer
	lcd_init();
	send_string("Vesalius");
	send_command(0xC0);
	send_string("Dynamics");

    unsigned int servo_stepval, servo_stepnow;
    unsigned int servo_lut[ SERVO_STEPS+1 ];
    unsigned int i;

    // Calculate the step value and define the current step, defaults to minimum.
    servo_stepval   = ( (SERVO_MAX - SERVO_MIN) / SERVO_STEPS );
    servo_stepnow   = SERVO_MIN;

    // Fill up the LUT
    for (i = 0; i < SERVO_STEPS; i++) {
        servo_stepnow += servo_stepval;
        servo_lut[i] = servo_stepnow;
    }

    // Setup the PWM, etc.
    WDTCTL  = WDTPW + WDTHOLD;     // Kill watchdog timer
    TACCTL1 = OUTMOD_7;            // TACCR1 reset/set
    TACTL   = TASSEL_2 + MC_1;     // SMCLK, upmode
    TACCR0  = PWM_Period-1;        // PWM Period
    TACCR1  = PWM_Duty;            // TACCR1 PWM Duty Cycle
    P1DIR   |= BIT2;               // P1.2 = output
    P1SEL   |= BIT2;               // P1.2 = TA1 output

    //push button code
	P1SEL  &=  (~BIT6);    //  Set P1.6    SEL as  GPIO
	P1DIR  &=  (~BIT6);    //  Set P1.6    SEL as  Input
	P1IES  |=  (BIT6); //  Falling Edge    1   ->  0
	P1IFG  &=  (~BIT6);    //  Clear   interrupt   flag    for P1.6
	P1IE   |=  (BIT6); //  Enable  interrupt   for P1.6
	__enable_interrupt();  //  Enable  Global  Interrupts
	//end push button code


    // Main loop
    while (1){

    	//push button code
		if(flag   ==  1)
		{
			//   Do  Something
			flag =   0;
			count++;

			char str[5];
			sprintf(str, "%d", count);
			lcd_init();
			send_string("Count value:");
			send_command(0xC0);
			send_string(str);

		}
    	//end push button code

		/*
        // Go to 0°
        TACCR1 = servo_lut[0];
        __delay_cycles(100000);

        // Go to 45°
        TACCR1 = servo_lut[45];
        __delay_cycles(100000);

        // Go to 90°
        TACCR1 = servo_lut[90];
        __delay_cycles(100000);

        // Go to 180°
        TACCR1 = servo_lut[179];
        __delay_cycles(100000);

        // Move forward toward the maximum step value
        for (i = 0; i < SERVO_STEPS; i++) {
            TACCR1 = servo_lut[i];
            __delay_cycles(20000);
        }
        // Move backward toward the minimum step value
        for (i = SERVO_STEPS; i > 0; i--) {
            TACCR1 = servo_lut[i];
            __delay_cycles(20000);
        }
        */
   }
}

//  Port    1   interrupt   service routine
//  used with push button code
#pragma vector=PORT1_VECTOR
__interrupt void    Port_1(void)
{
	switch(P1IFG){
	case BIT6:
		__delay_cycles(40000);	//debounce code
		flag   =   1;
		P1IFG  &=  (~BIT6);    //  P1.6    IFG clear
		break;
	default:
		int test;
		test = 0;
		test++;
		break;
	}

}
